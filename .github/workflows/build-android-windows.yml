name: Build .NET MAUI (Android & Windows)

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  # Optional: Allow manual triggering from GitHub Actions UI
  workflow_dispatch:

jobs:
  build:
    strategy:
      matrix:
        include:
          - platform: android
            runs-on: windows-latest
            target-framework: net8.0-android
            build-args: /p:AndroidPackageFormat=apk
            artifact-name: android-apk
            artifact-path: '**/*.apk'
          - platform: windows
            runs-on: windows-latest
            target-framework: net8.0-windows10.0.19041.0
            build-args: /p:WindowsPackageType=None
            artifact-name: windows-app
            artifact-path: './publish/windows/**'
    
    runs-on: ${{ matrix.runs-on }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Setup Java JDK (Android only)
        if: matrix.platform == 'android'
        uses: actions/setup-java@v4
        with:
          distribution: 'microsoft'
          java-version: '11'

      - name: Install MAUI workload
        run: dotnet workload install maui

      - name: Restore dependencies
        run: dotnet restore RestaurantPOS.sln

      - name: Create Keystore (Android only)
        if: matrix.platform == 'android'
        run: |
          echo "Generating keystore file for Android signing..."
          $KEYTOOL_PATH = Join-Path $env:JAVA_HOME "bin/keytool.exe"
          & $KEYTOOL_PATH -genkey -v -keystore restaurantpos.keystore -alias restaurantpos -keyalg RSA -keysize 2048 -validity 10000 -storepass restaurant123 -keypass restaurant123 -dname "CN=RestaurantPOS, O=dhhieu113, L=Unknown, ST=Unknown, C=US"
        shell: pwsh
        
      - name: Build ${{ matrix.platform }}
        run: dotnet build RestaurantPOS.sln -c Release -f ${{ matrix.target-framework }} ${{ matrix.build-args }}

      - name: Publish desktop app (Windows only)
        if: matrix.platform == 'windows'
        run: |
          dotnet publish RestaurantPOS.csproj -c Release -f ${{ matrix.target-framework }} -o ./publish/windows --self-contained true
        shell: bash

      - name: Test desktop app (Windows only)
        if: matrix.platform == 'windows'
        run: |
          echo "Testing ${{ matrix.platform }} desktop application..."
          dotnet test --configuration Release --framework ${{ matrix.target-framework }} --verbosity normal || echo "No tests found or test execution failed"

      - name: Find build artifacts
        shell: pwsh
        run: |
          if ("${{ matrix.platform }}" -eq "android") {
            Get-ChildItem -Path . -Filter "*.apk" -Recurse | Select-Object FullName
          } elseif ("${{ matrix.platform }}" -eq "windows") {
            Get-ChildItem -Path "./publish/windows" -Recurse | Select-Object FullName
          }

      - name: Upload ${{ matrix.platform }} artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact-name }}
          path: ${{ matrix.artifact-path }}
          retention-days: 7

  release:
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: List artifacts
        run: find ./artifacts -type f -name "*"

      - name: Generate release tag
        id: tag
        run: |
          TAG="v$(date +'%Y.%m.%d')-$(echo $GITHUB_SHA | cut -c1-7)"
          echo "tag=$TAG" >> $GITHUB_OUTPUT
          echo "Generated tag: $TAG"

      - name: Find and prepare Android APK
        id: find-apk
        run: |
          APK_FILE=$(find ./artifacts/android-apk -name "*.apk" | head -1)
          if [ -n "$APK_FILE" ]; then
            cp "$APK_FILE" ./RestaurantPOS.apk
            echo "apk_found=true" >> $GITHUB_OUTPUT
            echo "Found APK: $APK_FILE"
          else
            echo "apk_found=false" >> $GITHUB_OUTPUT
            echo "No APK file found"
          fi

      - name: Create Windows executable archive
        id: find-windows
        run: |
          if [ -d "./artifacts/windows-app" ]; then
            cd ./artifacts/windows-app
            tar -czf "$GITHUB_WORKSPACE/RestaurantPOS-Windows.tar.gz" *
            echo "windows_found=true" >> $GITHUB_OUTPUT
            echo "Windows app archived"
          else
            echo "windows_found=false" >> $GITHUB_OUTPUT
            echo "No Windows app found"
          fi

      - name: Create Release and Upload Assets
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.tag.outputs.tag }}
          name: RestaurantPOS ${{ steps.tag.outputs.tag }}
          body: |
            ## RestaurantPOS Release
            
            **Build Date:** $(date +'%Y-%m-%d %H:%M:%S UTC')
            **Commit:** ${{ github.sha }}
            
            ### Included Platforms:
            - ðŸ¤– **Android APK** - Direct APK file for installation on Android devices
            - ðŸªŸ **Windows Desktop** - Self-contained Windows application
            
            ### Installation:
            - **Android**: Download and install the APK file directly
            - **Windows**: Extract tar.gz and run the executable
            
            Built automatically from commit ${{ github.sha }}
          files: |
            RestaurantPOS.apk
            RestaurantPOS-Windows.tar.gz
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
