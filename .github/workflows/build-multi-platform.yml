name: Build .NET MAUI (Multi-Platform)

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    strategy:
      matrix:
        include:
          - platform: android
            runs-on: windows-latest
            target-framework: net8.0-android
            build-args: /p:AndroidPackageFormat=apk
            artifact-name: android-apk
            artifact-path: '**/*.apk'
          - platform: ios
            runs-on: macos-latest
            target-framework: net8.0-ios
            build-args: /p:CreatePackage=true /p:EnableAssemblyILStripping=false /p:MtouchLink=None /p:UseInterpreter=true
            artifact-name: ios-app
            artifact-path: '**/*.app'
          - platform: windows
            runs-on: windows-latest
            target-framework: net8.0-windows10.0.19041.0
            build-args: /p:WindowsPackageType=None
            artifact-name: windows-app
            artifact-path: './publish/windows/**'
    
    runs-on: ${{ matrix.runs-on }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Cache NuGet packages
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Cache .NET workloads (iOS only)
        if: matrix.platform == 'ios'
        uses: actions/cache@v4
        with:
          path: ~/.dotnet
          key: ${{ runner.os }}-dotnet-workloads-${{ hashFiles('**/*.csproj') }}
          restore-keys: |
            ${{ runner.os }}-dotnet-workloads-

      - name: Setup Java JDK (Android only)
        if: matrix.platform == 'android'
        uses: actions/setup-java@v4
        with:
          distribution: 'microsoft'
          java-version: '11'

      - name: Setup Xcode (iOS only)
        if: matrix.platform == 'ios'
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: latest-stable

      - name: Setup iOS build optimization (iOS only)
        if: matrix.platform == 'ios'
        run: |
          # Set environment variables to speed up iOS builds
          echo "DOTNET_CLI_TELEMETRY_OPTOUT=1" >> $GITHUB_ENV
          echo "DOTNET_SKIP_FIRST_TIME_EXPERIENCE=1" >> $GITHUB_ENV
          echo "DOTNET_NOLOGO=1" >> $GITHUB_ENV

      - name: Install MAUI workload
        run: dotnet workload install maui

      - name: Restore dependencies
        run: dotnet restore RestaurantPOS.sln

      - name: Build ${{ matrix.platform }}
        run: |
          if [ "${{ matrix.platform }}" = "ios" ]; then
            # iOS optimized build with parallel processing and reduced linking
            dotnet build RestaurantPOS.sln -c Release -f ${{ matrix.target-framework }} ${{ matrix.build-args }} --verbosity minimal -maxcpucount
          else
            # Standard build for other platforms
            dotnet build RestaurantPOS.sln -c Release -f ${{ matrix.target-framework }} ${{ matrix.build-args }}
          fi
        shell: bash

      - name: Publish desktop app (Windows only)
        if: matrix.platform == 'windows'
        run: |
          dotnet publish RestaurantPOS.csproj -c Release -f ${{ matrix.target-framework }} -o ./publish/windows --self-contained true
        shell: bash

      - name: Test desktop app (Windows only)
        if: matrix.platform == 'windows'
        run: |
          echo "Testing ${{ matrix.platform }} desktop application..."
          dotnet test --configuration Release --framework ${{ matrix.target-framework }} --verbosity normal || echo "No tests found or test execution failed"

      - name: Find build artifacts
        shell: pwsh
        run: |
          if ("${{ matrix.platform }}" -eq "android") {
            Get-ChildItem -Path . -Filter "*.apk" -Recurse | Select-Object FullName
          } elseif ("${{ matrix.platform }}" -eq "ios") {
            Get-ChildItem -Path . -Filter "*.app" -Recurse | Select-Object FullName
          } elseif ("${{ matrix.platform }}" -eq "windows") {
            Get-ChildItem -Path "./publish/windows" -Recurse | Select-Object FullName
          }

      - name: Upload ${{ matrix.platform }} artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact-name }}
          path: ${{ matrix.artifact-path }}

  release:
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: build
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: List artifacts
        run: find ./artifacts -type f -name "*"

      - name: Create ZIP files for each platform
        run: |
          cd ./artifacts
          for dir in */; do
            platform=$(basename "$dir")
            echo "Creating ZIP for $platform"
            cd "$dir"
            zip -r "../RestaurantPOS-${platform}.zip" ./*
            cd ..
          done

      - name: Generate release tag
        id: tag
        run: |
          TAG="v$(date +'%Y.%m.%d')-$(echo $GITHUB_SHA | cut -c1-7)"
          echo "tag=$TAG" >> $GITHUB_OUTPUT
          echo "Generated tag: $TAG"

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.tag.outputs.tag }}
          release_name: RestaurantPOS ${{ steps.tag.outputs.tag }}
          body: |
            ## RestaurantPOS Multi-Platform Release
            
            **Build Date:** $(date +'%Y-%m-%d %H:%M:%S UTC')
            **Commit:** ${{ github.sha }}
            
            ### Included Platforms:
            - ü§ñ **Android APK** - Ready for installation on Android devices
            - üçé **iOS App** - For iOS devices (requires signing)
            - ü™ü **Windows Desktop** - Self-contained Windows application
            
            ### Installation:
            - **Android**: Download and install the APK file
            - **iOS**: Requires Xcode for installation and signing
            - **Windows**: Extract ZIP and run the executable
            
            Built automatically from commit ${{ github.sha }}
          draft: false
          prerelease: false

      - name: Upload Android APK
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts/RestaurantPOS-android-apk.zip
          asset_name: RestaurantPOS-Android.zip
          asset_content_type: application/zip

      - name: Upload iOS App
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts/RestaurantPOS-ios-app.zip
          asset_name: RestaurantPOS-iOS.zip
          asset_content_type: application/zip

      - name: Upload Windows App
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts/RestaurantPOS-windows-app.zip
          asset_name: RestaurantPOS-Windows.zip
          asset_content_type: application/zip
